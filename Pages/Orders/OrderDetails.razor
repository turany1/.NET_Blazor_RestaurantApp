@page "/orders/{OrderId:int}"
@inject OrderService OrderService

<h2>Order Details</h2>

@if (order != null)
{
    <p><strong>Order ID:</strong> @order.OrderId</p>
    <p><strong>User:</strong> @order.User?.Name</p>
    <p><strong>Date:</strong> @order.OrderDate.ToString("g")</p>
    <p><strong>Status:</strong> @order.Status</p>
    <p><strong>Delivery:</strong> @(order.IsDelivery ? "Yes" : "No")</p>
    @if (order.IsDelivery && order.DeliveryAddress != null)
    {
        <p><strong>Address:</strong> @order.DeliveryAddress.Street, @order.DeliveryAddress.City @order.DeliveryAddress.PostalCode</p>
    }
    <table class="table table-sm">
        <thead>
            <tr>
                <th>Dish</th><th>Qty</th><th>Unit</th><th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in order.Items)
            {
                <tr>
                    <td>@item.Dish?.Name</td>
                    <td>@item.Quantity</td>
                    <td>@item.UnitPrice.ToString("C")</td>
                    <td>@item.LineTotal.ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>
    <p><strong>Delivery Fee:</strong> @order.DeliveryFee.ToString("C")</p>
    <p><strong>Total Price:</strong> @order.TotalPrice.ToString("C")</p>
    <hr />
    <h4>Update Status</h4>
    {
        <div class="btn-group">
            @foreach (OrderStatus s in Enum.GetValues(typeof(OrderStatus)))
            {
                if (s != order.Status)
                {
                    <button class="btn btn-sm btn-secondary" @onclick="() => ChangeStatus(s)">@s</button>
                }
            }
        </div>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public int OrderId { get; set; }
    private Order? order;

    protected override async Task OnParametersSetAsync()
    {
        order = await OrderService.GetByIdAsync(OrderId);
    }

    private async Task ChangeStatus(OrderStatus newStatus)
    {
        if (order != null)
        {
            await OrderService.UpdateStatusAsync(order.OrderId, newStatus);
            order = await OrderService.GetByIdAsync(OrderId);
            StateHasChanged();
        }
    }
}